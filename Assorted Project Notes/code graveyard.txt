Heres some of the stuff that did not work / was bad. I started this quite late so many methods will never receive a proper burial

Made redundant by a change in approach (I dont know why I was so in love with recalculating everything at every step of the solve)
    
    // Creates a priority queue which where the head of the queue is the word with the most unique letters
    public PriorityQueue<String>getInitialCandidates() {
        letters_needed = new BitSet(12);
        PriorityQueue<String> sorted_initial_candidates = this.findBestMoves(0, valid_words.size() - 1);
        String potential_word = sorted_initial_candidates.poll();
        this.potential_solution.add(potential_word);
        letters_needed.or(word_scores.words_data.get(potential_word).word_mask);
        return sorted_initial_candidates;
    }

This was originally at the start of the getSolution method. I never even tried to run it
    
    int start;
    int end;
    if (!potential_solution.isEmpty()) {
        WordData previous_word_data = word_scores.words_data.get(potential_solution.get(potential_solution.size() - 1));
        start = -1;
        end = valid_words.size() - 1;
        ListIterator<String> valid_words_iterator = valid_words.listIterator(0);
        try {            
            while (start == -1) {
                if (valid_words_iterator.next().charAt(0) == previous_word_data.ending_letter) {
                    start = valid_words_iterator.previousIndex();
                }
            }
        }
        
        while (end == valid_words.size() - 1) {
            if (valid_words_iterator.next().charAt(0) != previous_word_data.ending_letter) {
                end = valid_words_iterator.previousIndex() + 1; // This is needed as the method sublist used in findBestMoves does not include the upper bound
            }
        }
    } else {
        start = 0;
        end = valid_words.size() - 1;
    }

    // put some exception here that catches cases where valid words doesn't contain any words that fit the criteria
    PriorityQueue<String> sorted_valid_words = findBestMoves(start, end);
    String potential_word = sorted_valid_words.poll();
    this.potential_solution.add(potential_word);
    letters_needed.or(word_scores.words_data.get(potential_word).word_mask);
    if (letters_needed.cardinality() != 12) {
        getSolution();
    } else {
        return;
    }

All of this stuff was originally in WordScores before i realized that there was no reason it to not just be in WordData

    // For all the words in valid_words, creates a mask where a 1 indicates that that character is present in the word
    public HashMap<String, WordData> getWordsData(ArrayList<String> valid_words) {
        HashMap<String, WordData> word_masks = new HashMap<String, WordData>();
        for (String word : valid_words) {
            int word_length = word.length();
            BitSet word_mask = new BitSet(12);
            char first_letter = word.charAt(0);
            char last_letter = word.charAt(word_length - 1);
            for (int i = 0; i < word_length; i++) {
                word_mask.or(this.letter_masks.get(word.charAt(i)));
            }
            word_masks.put(word, new WordData(word_mask, first_letter, last_letter));
        }
        return word_masks;
    }

This was from when my plan was to sort the possible continuations at each step (bad idea), then select the best one. Even though i scrapped it, 
getUniqueLetters basically does the same thing, so i got some use out of it in the end

    package solver;

    import java.util.Comparator;
    import java.util.HashMap;
    import java.util.BitSet;

    public class MaskComparator implements Comparator<String> {
        HashMap<String, WordData> words_data;
        BitSet letters_needed;

        public MaskComparator(HashMap<String, WordData> words_data, BitSet letters_needed) {
            this.words_data = words_data;
            this.letters_needed = letters_needed;
        }

        public void updateLettersNeeded(BitSet letters_needed) {
            this.letters_needed = letters_needed;
        }

        public int compare(String word_1, String word_2) {
            BitSet temp_letters_needed = (BitSet)letters_needed.clone(); // We need to have temp_letters_needed because .or alters the value of the object its called on
            temp_letters_needed.or(words_data.get(word_1).word_mask);
            int new_letters_1 = temp_letters_needed.cardinality() - letters_needed.cardinality();
            temp_letters_needed = letters_needed; // Resetting temp_letters_needed
            temp_letters_needed.or(words_data.get(word_2).word_mask);
            int new_letters_2 = temp_letters_needed.cardinality() - letters_needed.cardinality();
            
            if (new_letters_1 > new_letters_2) {
                return 1;
            } else if (new_letters_1 < new_letters_2) {
                return -1;
            }
            return 0;
        }
    }